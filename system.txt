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

%{
#include "y.tab.h"   /* This includes the header file generated by Yacc. */
#include <stdlib.h>  /* This includes standard library functions. */
%}

%%  /* Rules section begins */

"+"     { return ADD; }    /* When a "+" is encountered, return the ADD token. */
"-"     { return SUB; }    /* When a "-" is encountered, return the SUB token. */
"*"     { return MUL; }    /* When a "*" is encountered, return the MUL token. */
"/"     { return DIV; }    /* When a "/" is encountered, return the DIV token. */
"|"     { return ABS; }    /* When a "|" is encountered, return the ABS token. */
[0-9]+  { yylval = atoi(yytext); return NUMBER; }  /* When a number is encountered, convert it from string to integer and return the NUMBER token. */
\n      { return EOL; }    /* When a newline is encountered, return the EOL (end of line) token. */
" "     { /* ignore whitespace */ }  /* When a whitespace is encountered, it's ignored. */
.       { yyerror("Invalid character"); }  /* When an unknown character is encountered, print an error message. */

%%  /* Rules section ends */

int yywrap() {  /* This is a special function that is called when EOF is reached. By returning 1, it signals to the lexer that it should stop processing. */
    return 1;
}

-----------------------------
%{
#include <stdio.h>
%}

%token NUMBER
%token ADD SUB MUL DIV ABS
%token EOL

%%

calculation: 
      /* empty */
    | calculation line
    ;

line: 
      EOL
    | exp EOL { printf("%d\n", $1); }
    ;

exp: 
      NUMBER
    | exp ADD exp { $$ = $1 + $3; }
    | exp SUB exp { $$ = $1 - $3; }
    | exp MUL exp { $$ = $1 * $3; }
    | exp DIV exp { if ($3 == 0) { yyerror("Divide by zero"); } else { $$ = $1 / $3; }}
    | ABS exp '|' { $$ = $2 >= 0? $2 : - $2; }
    ;

%%

void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

int main(void) {
    yyparse();
    return 0;
}

===============================

# 2

%{
   /* Definition section */
  #include "y.tab.h"
 %}
  
/* Rule Section */
 %%
[aA] {return A;}
[bB] {return B;}
\n {return NL;}
.  {return yytext[0];}
%%
  
int yywrap() 
 { 
  return 1; 
 } 

 ---------------------------

 %{
   /* Definition section */
   #include<stdio.h>
   #include<stdlib.h>
%}
  
%token A B NL
  
/* Rule Section */
%%
stmt: S NL  { printf("valid string\n");
              exit(0); }
;
S: A S B |
;
%%
  
int yyerror(char *msg)
 {
  printf("invalid string\n");
  exit(0);
 }
  
//driver code 
main()
 {
  printf("enter the string\n");
  yyparse();
 }

================================
# 3

%{
  /* Definition section */
  #include<stdio.h>
  #include<stdlib.h>
  #include"y.tab.h"
  extern int yylval;
%}
  
/* Rule Section */
 %%
 0 {yylval=0;return ZERO;}
 1 {yylval=1;return ONE;}
   
 [ \t] {;}
 \n return 0;
 . return yytext[0];
%%
  
    
int yywrap()  
 {  
  return 1;  
 }  
 ------------------------------

 %{
  /* Definition section */
  #include<stdio.h>
  #include<stdlib.h>
  void yyerror(char *s);
%}
%token ZERO ONE
  
/* Rule Section */
%%
N: L {printf("\n%d", $$);}
L: L B {$$=$1*2+$2;}
| B {$$=$1;}
B:ZERO {$$=$1;}
|ONE {$$=$1;};
%%
  
//driver code 
int main()
{
 while(yyparse());
}
  
yyerror(char *s)
{
 fprintf(stdout, "\n%s", s);
}
  